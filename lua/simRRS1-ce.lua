local codeEditorInfos = [[
int status = simRRS1.CANCEL_EVENT(buffer rcsHandle, int eventId)
int status = simRRS1.CANCEL_FLYBY_CRITERIA(buffer rcsHandle, int paramNumber)
int status = simRRS1.CANCEL_MOTION(buffer rcsHandle)
int status = simRRS1.CONTINUE_MOTION(buffer rcsHandle)
int status, buffer cartPos, string configuration = simRRS1.CONTROLLER_POSITION_TO_MATRIX(buffer rcsHandle, string contrPos)
int status = simRRS1.DEBUG(buffer rcsHandle, buffer debugFlags, int opcodeSelect, string logFileName)
int status = simRRS1.DEFINE_EVENT(buffer rcsHandle, int eventId, int targetId, float resolution, int typeOfEvent, float[16] eventSpec)
int status, string outData = simRRS1.EXTENDED_SERVICE(buffer rcsHandle, string inData)
int status, string frameId, int frameType, string relativeToId, buffer jointNumber, buffer frameData = simRRS1.GET_CELL_FRAME(buffer rcsHandle, int storage, int firstNext, string frameId)
int status, int targetId = simRRS1.GET_CURRENT_TARGETID(buffer rcsHandle)
int status, int eventId, float timeTillEvent = simRRS1.GET_EVENT(buffer rcsHandle, int eventNumber)
int status, buffer cartPos, buffer jointPos, string configuration, buffer jointLimit, int numberOfMessages = simRRS1.GET_FORWARD_KINEMATIC(buffer rcsHandle, buffer jointPos)
int status, buffer homePosition = simRRS1.GET_HOME_JOINT_POSITION(buffer rcsHandle)
int status, buffer jointPos, buffer jointLimit, int numberOfMessages = simRRS1.GET_INVERSE_KINEMATIC(buffer rcsHandle, buffer cartPos, buffer jointPos, string configuration, buffer outputFormat)
int status, int severity, string text = simRRS1.GET_MESSAGE(buffer rcsHandle, int messageNumber)
int status, buffer cartPos, buffer jointPos, string configuration, float elapsedTime, buffer jointLimit, int numberOfEvents, int numberOfMessages = simRRS1.GET_NEXT_STEP(buffer rcsHandle, buffer outputFormat)
int status, string paramId, string paramContents, int permission = simRRS1.GET_RCS_DATA(buffer rcsHandle, int storage, int firstNext, string paramId)
int status, string manipulator, string controller, string software = simRRS1.GET_ROBOT_STAMP(buffer rcsHandle)
int status, buffer rcsHandle, int rcsRrsVersion, int rcsVersion, int numberOfMessages = simRRS1.INITIALIZE(int robotNumber, string robotPathName, string modulePathName, string manipulatorType, int CarrrsVersion, int debug)
int status, int numberOfMessages = simRRS1.LOAD_RCS_DATA(buffer rcsHandle)
int status, string contrPos = simRRS1.MATRIX_TO_CONTROLLER_POSITION(buffer rcsHandle, buffer cartPos, string configuration)
int status = simRRS1.MODIFY_CELL_FRAME(buffer rcsHandle, int storage, string frameId, buffer frameData)
int status = simRRS1.MODIFY_RCS_DATA(buffer rcsHandle, int storage, string paramId, string paramContents)
int status, int numberOfMessages = simRRS1.RESET(buffer rcsHandle, int resetLevel)
int status = simRRS1.REVERSE_MOTION(buffer rcsHandle, float distance)
int status = simRRS1.SAVE_RCS_DATA(buffer rcsHandle)
int status = simRRS1.SELECT_DOMINANT_INTERPOLATION(buffer rcsHandle, int dominantIntType, int dominantIntParam)
int status = simRRS1.SELECT_FLYBY_CRITERIA(buffer rcsHandle, int paramNumber)
int status = simRRS1.SELECT_FLYBY_MODE(buffer rcsHandle, int flyByOn)
int status = simRRS1.SELECT_MOTION_TYPE(buffer rcsHandle, int motionType)
int status = simRRS1.SELECT_ORIENTATION_INTERPOLATION_MODE(buffer rcsHandle, int interpolationMode, int oriConst)
int status = simRRS1.SELECT_POINT_ACCURACY(buffer rcsHandle, int accuracyType)
int status = simRRS1.SELECT_TARGET_TYPE(buffer rcsHandle, int targetType, buffer cartPos, buffer jointPos, string configuration)
int status = simRRS1.SELECT_TIME_COMPENSATION(buffer rcsHandle, buffer compensation)
int status = simRRS1.SELECT_TRACKING(buffer rcsHandle, buffer conveyorFlags)
int status = simRRS1.SELECT_TRAJECTORY_MODE(buffer rcsHandle, int trajectoryOn)
int status = simRRS1.SELECT_WEAVING_GROUP(buffer rcsHandle, int groupNo, int groupOn)
int status = simRRS1.SELECT_WEAVING_MODE(buffer rcsHandle, int weavingMode)
int status = simRRS1.SELECT_WORK_FRAMES(buffer rcsHandle, string toolId, string objectId)
int status = simRRS1.SET_ADVANCE_MOTION(buffer rcsHandle, int numberOfMotion)
int status = simRRS1.SET_CARTESIAN_ORIENTATION_ACCELERATION(buffer rcsHandle, int rotationNo, float accelValue, int accelType)
int status = simRRS1.SET_CARTESIAN_ORIENTATION_SPEED(buffer rcsHandle, int rotationNo, float speedValue)
int status = simRRS1.SET_CARTESIAN_POSITION_ACCELERATION(buffer rcsHandle, float accelValue, int accelType)
int status = simRRS1.SET_CARTESIAN_POSITION_SPEED(buffer rcsHandle, float speedValue)
int status = simRRS1.SET_CONFIGURATION_CONTROL(buffer rcsHandle, string paramId, string paramContents)
int status = simRRS1.SET_CONVEYOR_POSITION(buffer rcsHandle, buffer inputFormat, buffer conveyorFlags, float[32] conveyorPos)
int status = simRRS1.SET_FLYBY_CRITERIA_PARAMETER(buffer rcsHandle, int paramNumber, int jointNr, float paramValue)
int status, buffer jointLimit = simRRS1.SET_INITIAL_POSITION(buffer rcsHandle, buffer cartPos, buffer jointPos, string configuration)
int status = simRRS1.SET_INTERPOLATION_TIME(buffer rcsHandle, float interpolationTime)
int status = simRRS1.SET_JOINT_ACCELERATIONS(buffer rcsHandle, int allJointFlags, buffer jointFlags, float[32] accelPercent, int accelType)
int status = simRRS1.SET_JOINT_JERKS(buffer rcsHandle, int allJointFlags, buffer jointFlags, float[32] jerkPercent, int jerkType)
int status = simRRS1.SET_JOINT_SPEEDS(buffer rcsHandle, int allJointFlags, buffer jointFlags, float[32] speedPercent)
int status = simRRS1.SET_MOTION_FILTER(buffer rcsHandle, int filterFactor)
int status = simRRS1.SET_MOTION_TIME(buffer rcsHandle, float timeValue)
int status = simRRS1.SET_NEXT_TARGET(buffer rcsHandle, int targetId, int targetParam, buffer cartPos, buffer jointPos, string configuration, float targetParamValue)
int status = simRRS1.SET_OVERRIDE_ACCELERATION(buffer rcsHandle, float correctionValue, int accelType, int correctionType)
int status = simRRS1.SET_OVERRIDE_POSITION(buffer rcsHandle, buffer posOffset)
int status = simRRS1.SET_OVERRIDE_SPEED(buffer rcsHandle, float correctionValue, int correctionType)
int status = simRRS1.SET_PAYLOAD_PARAMETER(buffer rcsHandle, int storage, string frameId, int paramNumber, float paramValue)
int status = simRRS1.SET_POINT_ACCURACY_PARAMETER(buffer rcsHandle, int accuracyType, float accuracyValue)
int status = simRRS1.SET_REST_PARAMETER(buffer rcsHandle, int paramNumber, float paramValue)
int status = simRRS1.SET_WEAVING_GROUP_PARAMETER(buffer rcsHandle, int groupNo, int paramNo, float paramValue)
int status = simRRS1.STOP_MOTION(buffer rcsHandle)
int status = simRRS1.TERMINATE(buffer rcsHandle)
bool result = simRRS1.selectRcsServer(int rcsServerHandle)
int rcsServerHandle = simRRS1.startRcsServer(string rcsLibraryFilename, string rcsLibraryFunctionName, int portNumber)
bool result = simRRS1.stopRcsServer(int rcsServerHandle)
]]

registerCodeEditorInfos("simRRS1", codeEditorInfos)
